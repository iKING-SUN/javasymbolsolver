buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven{ url = "http://maven.aliyun.com/nexus/content/groups/public/" }
  }
}

plugins {
  id 'net.saliman.cobertura' version '2.3.0'
  id 'com.github.kt3k.coveralls' version '2.6.3'
}

def jssVersion = '0.6.4-SNAPSHOT'
def descriptions = ["java-symbol-solver-core": "A Symbol Solver for Java, built on top of JavaParser (core)",
                    "java-symbol-solver-model": "A Symbol Solver for Java, built on top of JavaParser (model)",
                    "java-symbol-solver-logic": "A Symbol Solver for Java, built on top of JavaParser (logic)",
                    "java-symbol-solver-testing": "A Symbol Solver for Java, built on top of JavaParser (tests)",]

task version << {
  print "Version ${jssVersion}"
}

allprojects  {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'jacoco'

  group = 'com.github.javaparser'
  version = jssVersion

  repositories {
    jcenter()
    mavenCentral()
    maven{ url = "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://repo.maven.apache.org/maven2" }
  }

  apply plugin: 'java'

}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    jcenter()
    mavenCentral()
    maven{ url = "http://maven.aliyun.com/nexus/content/groups/public/" }
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  compileJava.options.encoding = 'UTF-8'

  tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('docencoding', 'UTF-8')
    options.addStringOption('charset', 'UTF-8')
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/test_coverage")
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled false
      html.destination "${buildDir}/jacocoHtml"
    }
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  task generatePom << {
    def generatedPom = pom {
      project {
        name project.name
        description descriptions[project.name]
        version jssVersion
        packaging 'jar'
        url 'https://github.com/javaparser/java-symbol-solver'

        scm {
          connection 'scm:git:https://github.com/javaparser/java-symbol-solver.git'
          developerConnection 'scm:git:git@github.com:javaparser/java-symbol-solver.git'
          url 'https://github.com/javaparser/java-symbol-solver.git'
        }

        licenses {
          license {
            name 'The MIT License (MIT)'
            url 'http://opensource.org/licenses/MIT'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id = 'ftomassetti'
            name = 'Federico Tomassetti'
            email = 'federico@tomassetti.me'
          }
        }
      }
    }
    generatedPom.writeTo("$buildDir/pom.xml")
  }

  test {
    maxHeapSize = "4096m"
  }
}

task sign(type:Exec) {
  doLast {
    String home = System.getProperty("user.home")
    String passphrase = new File(home + '/.gnupg/passphrase.txt').text
    commandLine 'gpg2', '--passphrase', passphrase, '--batch', '--yes', '--no-tty', '-ab', 'java-symbol-solver-core/build/pom.xml'
  }
}


test {
  testLogging {
    exceptionFormat = 'full'
  }
}
